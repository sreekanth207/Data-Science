{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script><script>requirejs.config({paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min']},});if(!window._Plotly) {require(['plotly'],function(plotly) {window._Plotly=plotly;});}</script>"
      ],
      "text/vnd.plotly.v1+html": [
       "<script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script><script>requirejs.config({paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min']},});if(!window._Plotly) {require(['plotly'],function(plotly) {window._Plotly=plotly;});}</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import ta\n",
    "import matplotlib as mpl\n",
    "import plotly.graph_objs as go\n",
    "from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot \n",
    "from datetime import datetime, timedelta\n",
    "import warnings\n",
    "import datetime\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "init_notebook_mode(connected=True)\n",
    "mpl.style.use('seaborn')\n",
    "pd.set_option('display.max_columns', 1000)\n",
    "from sklearn.metrics import accuracy_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"aud_usd_h4_h1_all_merged_corr_0.1_v1.csv\")\n",
    "df.columns = df.columns.str.replace('.','_')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bid_close_x</th>\n",
       "      <th>class_target1</th>\n",
       "      <th>target1_x</th>\n",
       "      <th>target2_x</th>\n",
       "      <th>target3_x</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.9124</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.9117</td>\n",
       "      <td>0.9135</td>\n",
       "      <td>0.9142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.9117</td>\n",
       "      <td>1</td>\n",
       "      <td>0.9135</td>\n",
       "      <td>0.9142</td>\n",
       "      <td>0.9142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.9135</td>\n",
       "      <td>1</td>\n",
       "      <td>0.9142</td>\n",
       "      <td>0.9142</td>\n",
       "      <td>0.9156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.9142</td>\n",
       "      <td>0</td>\n",
       "      <td>0.9142</td>\n",
       "      <td>0.9156</td>\n",
       "      <td>0.9184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.9142</td>\n",
       "      <td>1</td>\n",
       "      <td>0.9156</td>\n",
       "      <td>0.9184</td>\n",
       "      <td>0.9196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.9156</td>\n",
       "      <td>1</td>\n",
       "      <td>0.9184</td>\n",
       "      <td>0.9196</td>\n",
       "      <td>0.9236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.9184</td>\n",
       "      <td>1</td>\n",
       "      <td>0.9196</td>\n",
       "      <td>0.9236</td>\n",
       "      <td>0.9205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.9196</td>\n",
       "      <td>1</td>\n",
       "      <td>0.9236</td>\n",
       "      <td>0.9205</td>\n",
       "      <td>0.9187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.9236</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.9205</td>\n",
       "      <td>0.9187</td>\n",
       "      <td>0.9190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.9205</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.9187</td>\n",
       "      <td>0.9190</td>\n",
       "      <td>0.9181</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   bid_close_x  class_target1  target1_x  target2_x  target3_x\n",
       "0       0.9124             -1     0.9117     0.9135     0.9142\n",
       "1       0.9117              1     0.9135     0.9142     0.9142\n",
       "2       0.9135              1     0.9142     0.9142     0.9156\n",
       "3       0.9142              0     0.9142     0.9156     0.9184\n",
       "4       0.9142              1     0.9156     0.9184     0.9196\n",
       "5       0.9156              1     0.9184     0.9196     0.9236\n",
       "6       0.9184              1     0.9196     0.9236     0.9205\n",
       "7       0.9196              1     0.9236     0.9205     0.9187\n",
       "8       0.9236             -1     0.9205     0.9187     0.9190\n",
       "9       0.9205             -1     0.9187     0.9190     0.9181"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['bid_close_x','class_target1','target1_x','target2_x','target3_x']].head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(14028, 839)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=df.dropna(how='all',axis=1)\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['time_local']=df['time_local'].astype(str).str[:-6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['year']=pd.DatetimeIndex(df['time_local']).year\n",
    "df['month']=pd.DatetimeIndex(df['time_local']).month\n",
    "df['day']=pd.DatetimeIndex(df['time_local']).day\n",
    "df['hour']=pd.DatetimeIndex(df['time_local']).hour\n",
    "df['dayofweek']=pd.DatetimeIndex(df['time_local']).dayofweek\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bid_close_x</th>\n",
       "      <th>class_target1</th>\n",
       "      <th>target1_x</th>\n",
       "      <th>target2_x</th>\n",
       "      <th>target3_x</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12440</th>\n",
       "      <td>0.7800</td>\n",
       "      <td>0</td>\n",
       "      <td>0.7800</td>\n",
       "      <td>0.7805</td>\n",
       "      <td>0.7803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12441</th>\n",
       "      <td>0.7800</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.7805</td>\n",
       "      <td>0.7803</td>\n",
       "      <td>0.7818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12442</th>\n",
       "      <td>0.7805</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.7803</td>\n",
       "      <td>0.7818</td>\n",
       "      <td>0.7839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12443</th>\n",
       "      <td>0.7803</td>\n",
       "      <td>1</td>\n",
       "      <td>0.7818</td>\n",
       "      <td>0.7839</td>\n",
       "      <td>0.7834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12444</th>\n",
       "      <td>0.7818</td>\n",
       "      <td>1</td>\n",
       "      <td>0.7839</td>\n",
       "      <td>0.7834</td>\n",
       "      <td>0.7819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12445</th>\n",
       "      <td>0.7839</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.7834</td>\n",
       "      <td>0.7819</td>\n",
       "      <td>0.7823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12446</th>\n",
       "      <td>0.7834</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.7819</td>\n",
       "      <td>0.7823</td>\n",
       "      <td>0.7829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12447</th>\n",
       "      <td>0.7819</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.7823</td>\n",
       "      <td>0.7829</td>\n",
       "      <td>0.7821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12448</th>\n",
       "      <td>0.7823</td>\n",
       "      <td>1</td>\n",
       "      <td>0.7829</td>\n",
       "      <td>0.7821</td>\n",
       "      <td>0.7821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12449</th>\n",
       "      <td>0.7829</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.7821</td>\n",
       "      <td>0.7821</td>\n",
       "      <td>0.7834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12450</th>\n",
       "      <td>0.7821</td>\n",
       "      <td>0</td>\n",
       "      <td>0.7821</td>\n",
       "      <td>0.7834</td>\n",
       "      <td>0.7839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12451</th>\n",
       "      <td>0.7821</td>\n",
       "      <td>1</td>\n",
       "      <td>0.7834</td>\n",
       "      <td>0.7839</td>\n",
       "      <td>0.7839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12452</th>\n",
       "      <td>0.7834</td>\n",
       "      <td>1</td>\n",
       "      <td>0.7839</td>\n",
       "      <td>0.7839</td>\n",
       "      <td>0.7834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12453</th>\n",
       "      <td>0.7839</td>\n",
       "      <td>0</td>\n",
       "      <td>0.7839</td>\n",
       "      <td>0.7834</td>\n",
       "      <td>0.7818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12454</th>\n",
       "      <td>0.7839</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.7834</td>\n",
       "      <td>0.7818</td>\n",
       "      <td>0.7839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12455</th>\n",
       "      <td>0.7834</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.7818</td>\n",
       "      <td>0.7839</td>\n",
       "      <td>0.7841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12456</th>\n",
       "      <td>0.7818</td>\n",
       "      <td>1</td>\n",
       "      <td>0.7839</td>\n",
       "      <td>0.7841</td>\n",
       "      <td>0.7827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12457</th>\n",
       "      <td>0.7839</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.7841</td>\n",
       "      <td>0.7827</td>\n",
       "      <td>0.7863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12458</th>\n",
       "      <td>0.7841</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.7827</td>\n",
       "      <td>0.7863</td>\n",
       "      <td>0.7863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12459</th>\n",
       "      <td>0.7827</td>\n",
       "      <td>1</td>\n",
       "      <td>0.7863</td>\n",
       "      <td>0.7863</td>\n",
       "      <td>0.7846</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       bid_close_x  class_target1  target1_x  target2_x  target3_x\n",
       "12440       0.7800              0     0.7800     0.7805     0.7803\n",
       "12441       0.7800             -1     0.7805     0.7803     0.7818\n",
       "12442       0.7805             -1     0.7803     0.7818     0.7839\n",
       "12443       0.7803              1     0.7818     0.7839     0.7834\n",
       "12444       0.7818              1     0.7839     0.7834     0.7819\n",
       "12445       0.7839             -1     0.7834     0.7819     0.7823\n",
       "12446       0.7834             -1     0.7819     0.7823     0.7829\n",
       "12447       0.7819             -1     0.7823     0.7829     0.7821\n",
       "12448       0.7823              1     0.7829     0.7821     0.7821\n",
       "12449       0.7829             -1     0.7821     0.7821     0.7834\n",
       "12450       0.7821              0     0.7821     0.7834     0.7839\n",
       "12451       0.7821              1     0.7834     0.7839     0.7839\n",
       "12452       0.7834              1     0.7839     0.7839     0.7834\n",
       "12453       0.7839              0     0.7839     0.7834     0.7818\n",
       "12454       0.7839             -1     0.7834     0.7818     0.7839\n",
       "12455       0.7834             -1     0.7818     0.7839     0.7841\n",
       "12456       0.7818              1     0.7839     0.7841     0.7827\n",
       "12457       0.7839             -1     0.7841     0.7827     0.7863\n",
       "12458       0.7841             -1     0.7827     0.7863     0.7863\n",
       "12459       0.7827              1     0.7863     0.7863     0.7846"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['year']==2018][['bid_close_x','class_target1','target1_x','target2_x','target3_x']].head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['target_2_val'] = ((df['target2_x']-df['bid_close_x'])/df['bid_close_x'])*100\n",
    "df.loc[df['target_2_val'] < -0.0005, 'class_target2'] = -1\n",
    "df.loc[df['target_2_val'] > 0.0005, 'class_target2'] = 1\n",
    "df.loc[(df['target_2_val']>=-0.0005) & (df['target_2_val']<=0.0005) , 'class_target2'] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bid_close_x</th>\n",
       "      <th>class_target1</th>\n",
       "      <th>target1_x</th>\n",
       "      <th>target2_x</th>\n",
       "      <th>target3_x</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12440</th>\n",
       "      <td>0.7800</td>\n",
       "      <td>0</td>\n",
       "      <td>0.7800</td>\n",
       "      <td>0.7805</td>\n",
       "      <td>0.7803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12441</th>\n",
       "      <td>0.7800</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.7805</td>\n",
       "      <td>0.7803</td>\n",
       "      <td>0.7818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12442</th>\n",
       "      <td>0.7805</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.7803</td>\n",
       "      <td>0.7818</td>\n",
       "      <td>0.7839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12443</th>\n",
       "      <td>0.7803</td>\n",
       "      <td>1</td>\n",
       "      <td>0.7818</td>\n",
       "      <td>0.7839</td>\n",
       "      <td>0.7834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12444</th>\n",
       "      <td>0.7818</td>\n",
       "      <td>1</td>\n",
       "      <td>0.7839</td>\n",
       "      <td>0.7834</td>\n",
       "      <td>0.7819</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       bid_close_x  class_target1  target1_x  target2_x  target3_x\n",
       "12440       0.7800              0     0.7800     0.7805     0.7803\n",
       "12441       0.7800             -1     0.7805     0.7803     0.7818\n",
       "12442       0.7805             -1     0.7803     0.7818     0.7839\n",
       "12443       0.7803              1     0.7818     0.7839     0.7834\n",
       "12444       0.7818              1     0.7839     0.7834     0.7819"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['year']==2018][['bid_close_x','class_target1','target1_x','target2_x','target3_x']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       " 1.0    6943\n",
       "-1.0    6874\n",
       " 0.0     211\n",
       "Name: class_target2, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['class_target2'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['class_target2']=df['class_target2'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2019-05-06 01:40:47'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import datetime   \n",
    "#date = datetime.date.today()\n",
    "date=pd.datetime.now().strftime(\"%Y-%m-%d %I:%M:%S\")\n",
    "date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['today']=date\n",
    "df['today'] =pd.DatetimeIndex(df['today'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['nb_months'] = ((df['today'] - pd.to_datetime(df['time_local'] ))/np.timedelta64(1, 'M'))\n",
    "df['nb_months'] = df['nb_months'].astype(int)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['nb_years']  = np.round(df['nb_months'] / 12 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    9.0\n",
       "1    9.0\n",
       "2    9.0\n",
       "3    9.0\n",
       "4    9.0\n",
       "Name: nb_years, dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['nb_years'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "col_drop= df.filter(regex='time').columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_cols = df.filter(regex='target').columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "cols_x = df.filter(regex='_x').columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "cols_y = df.filter(regex='_y').columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "cols_year = df.filter(regex='year').columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['year', 'nb_years'], dtype='object')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols_year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=df.drop(['Unnamed: 0','time_local', 'target2_x', 'target3_x', 'target1_y', 'target2_y',\n",
    "       'target3_y', 'class_target1', 'class_target3',\n",
    "       'PC_AUD_H4_target1', 'bid_close_y', 'today','target1_x','target_2_val'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=X.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_temp=X.select_dtypes(include=['object'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "obj=df_temp.loc[:, df_temp.dtypes =='object']\n",
    "for col in obj:\n",
    "    obj[col] = pd.to_numeric(obj[col], errors='coerce')\n",
    "df_temp[obj.columns]=obj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_temp=df_temp.replace([np.inf, -np.inf], np.nan)\n",
    "df_temp=df_temp.fillna(0)\n",
    "X[df_temp.columns]=df_temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_final= X[X['year'] < 2018]\n",
    "s=X[['month', 'dayofweek']]\n",
    "for each in s:\n",
    "    dummies = pd.get_dummies(s[each], prefix=each, drop_first=False)\n",
    "    X=X.drop([each],axis=1)\n",
    "    X = pd.concat([X, dummies], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=X[X.replace([np.inf, -np.inf], np.nan).notnull().all(axis=1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_pred=X[(X['year'] >= 2018) ]\n",
    "X_pred.to_csv(\"X_bid_price_7_2018_26_4_2019_three_class_target2.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_col=X.columns\n",
    "drop_col=list(x for x in all_col if 'h1_5' in x or 'h1_6' in x or 'h1_7' in x  )\n",
    "X=X.drop(columns=drop_col,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_final=X[(X['year'] < 2018) ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_final=X.drop(['year'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "y=X_final['class_target2']\n",
    "X1=X_final.drop(['class_target2'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "#from sklearn.preprocessing import StandardScaler\n",
    "#scaler=StandardScaler()\n",
    "#scaler.fit(X1)\n",
    "#X1=scaler.transform(X1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import linear_model\n",
    "from sklearn.linear_model import ElasticNet\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import r2_score\n",
    "np.seed=0\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "from imblearn.over_sampling import SMOTE\n",
    "smt = SMOTE(random_state=1)\n",
    "X2, y1 = smt.fit_sample(X1, y)\n",
    "len(X2),len(y1)\n",
    "X2=pd.DataFrame(X2)\n",
    "y1=pd.DataFrame(y1)\n",
    "X2.columns=X1.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(14120, 823) (14120, 1)\n",
      "(6052, 823) (6052, 1)\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X2, y1, test_size=0.3,random_state=1,stratify=y1)\n",
    "print (X_train.shape, y_train.shape)\n",
    "print (X_test.shape, y_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "gb=GradientBoostingClassifier(n_iter_no_change=3)\n",
    "gb.fit(X_train,y_train)\n",
    "y_pred=gb.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.52      0.52      0.52      2017\n",
      "         0.0       0.99      0.96      0.98      2018\n",
      "         1.0       0.52      0.53      0.53      2017\n",
      "\n",
      "   micro avg       0.67      0.67      0.67      6052\n",
      "   macro avg       0.68      0.67      0.67      6052\n",
      "weighted avg       0.68      0.67      0.67      6052\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.71      0.71      0.71      4707\n",
      "         0.0       0.99      0.97      0.98      4706\n",
      "         1.0       0.71      0.72      0.71      4707\n",
      "\n",
      "   micro avg       0.80      0.80      0.80     14120\n",
      "   macro avg       0.80      0.80      0.80     14120\n",
      "weighted avg       0.80      0.80      0.80     14120\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_train,gb.predict(X_train)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6728354263053536"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8012747875354108"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_train,gb.predict(X_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1056   18  943]\n",
      " [  42 1943   33]\n",
      " [ 944    0 1073]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "print(confusion_matrix(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.6591209517514871, 0.7077195467422096)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "gb=GradientBoostingClassifier(learning_rate=0.01,subsample=0.6,n_estimators=120,max_depth=3,n_iter_no_change=3)\n",
    "gb.fit(X_train,y_train)\n",
    "y_pred=gb.predict(X_test)\n",
    "accuracy_score(y_test,y_pred),accuracy_score(y_train,gb.predict(X_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.50      0.55      0.52      2017\n",
      "         0.0       0.98      0.93      0.95      2018\n",
      "         1.0       0.52      0.50      0.51      2017\n",
      "\n",
      "   micro avg       0.66      0.66      0.66      6052\n",
      "   macro avg       0.67      0.66      0.66      6052\n",
      "weighted avg       0.67      0.66      0.66      6052\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.57      0.62      0.60      4707\n",
      "         0.0       0.98      0.93      0.95      4706\n",
      "         1.0       0.59      0.57      0.58      4707\n",
      "\n",
      "   micro avg       0.71      0.71      0.71     14120\n",
      "   macro avg       0.71      0.71      0.71     14120\n",
      "weighted avg       0.71      0.71      0.71     14120\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_train,gb.predict(X_train)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1100   35  882]\n",
      " [  95 1876   47]\n",
      " [ 997    7 1013]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2927   64 1716]\n",
      " [ 208 4383  115]\n",
      " [1996   28 2683]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_train,gb.predict(X_train)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_importance=pd.DataFrame(gb.feature_importances_)\n",
    "fetaure_cols=pd.DataFrame(X1.columns)\n",
    "feature_df=pd.concat([fetaure_cols,feature_importance],axis=1)\n",
    "feature_df.columns=['col_name','value']\n",
    "feature_imp_df=feature_df.sort_values(by='value',ascending=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "features_three_class_bid_price=feature_imp_df[feature_imp_df['value']>0.00001]\n",
    "features_three_class_bid_price=pd.DataFrame(features_three_class_bid_price)\n",
    "features_three_class_bid_price.to_csv(\"features_three_class_bid_price_target2.csv\")\n",
    "features_three_class_bid_price=features_three_class_bid_price['col_name']\n",
    "X2_1=X2[features_three_class_bid_price]\n",
    "X2_1=pd.DataFrame(X2_1)\n",
    "y1_1=pd.DataFrame(y1)\n",
    "#X2_1.columns=X2_1.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(14120, 377) (14120, 1)\n",
      "(6052, 377) (6052, 1)\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test= train_test_split(X2_1, y1_1,test_size=0.3,random_state=1,stratify=y1_1)\n",
    "print (X_train.shape, y_train.shape)\n",
    "print (X_test.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.6490416391275612, 0.6991501416430594)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "gb=GradientBoostingClassifier(learning_rate=0.01,subsample=0.6,n_estimators=120,max_depth=3)\n",
    "gb.fit(X_train,y_train)\n",
    "y_pred=gb.predict(X_test)\n",
    "accuracy_score(y_test,y_pred),accuracy_score(y_train,gb.predict(X_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.49      0.55      0.52      2017\n",
      "         0.0       0.98      0.92      0.95      2018\n",
      "         1.0       0.51      0.48      0.49      2017\n",
      "\n",
      "   micro avg       0.65      0.65      0.65      6052\n",
      "   macro avg       0.66      0.65      0.65      6052\n",
      "weighted avg       0.66      0.65      0.65      6052\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.56      0.62      0.59      4707\n",
      "         0.0       0.98      0.92      0.95      4706\n",
      "         1.0       0.58      0.55      0.57      4707\n",
      "\n",
      "   micro avg       0.70      0.70      0.70     14120\n",
      "   macro avg       0.71      0.70      0.70     14120\n",
      "weighted avg       0.71      0.70      0.70     14120\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_train,gb.predict(X_train)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1b31e1f4cf8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import keras\n",
    "y_pred_proba=gb.predict_proba(X_test)\n",
    "y_test_cat = keras.utils.to_categorical(y_test, 3) \n",
    "from sklearn.metrics import roc_curve, auc,roc_auc_score\n",
    "fpr = dict()\n",
    "tpr = dict()\n",
    "roc_auc = dict()\n",
    "for i in range(3):\n",
    "    fpr[i], tpr[i], _ = roc_curve(y_test_cat[:, i],  y_pred_proba[:, i])\n",
    "    roc_auc[i] = auc(fpr[i], tpr[i]) \n",
    "fig=plt.figure(figsize=(16, 10))\n",
    "\n",
    "for i in range(3):\n",
    "\n",
    "    plt.plot(fpr[i], tpr[i], label='ROC curve of class {0} (area = {1:0.2f})'\n",
    "             ''.format(i, roc_auc[i]))\n",
    "    #plt.title('Receiver operating characteristic example')\n",
    "    plt.legend(loc=\"lower right\")\n",
    "    plt.legend(fontsize=12)\n",
    "plt.show() \n",
    " \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['gb_3_class_bid_price_target2.joblib']"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from joblib import dump,load\n",
    "dump(gb,'gb_3_class_bid_price_target2.joblib') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
