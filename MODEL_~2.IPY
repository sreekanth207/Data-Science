{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script><script>requirejs.config({paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min']},});if(!window._Plotly) {require(['plotly'],function(plotly) {window._Plotly=plotly;});}</script>"
      ],
      "text/vnd.plotly.v1+html": [
       "<script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script><script>requirejs.config({paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min']},});if(!window._Plotly) {require(['plotly'],function(plotly) {window._Plotly=plotly;});}</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import ta\n",
    "import matplotlib as mpl\n",
    "import plotly.graph_objs as go\n",
    "from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot \n",
    "from datetime import datetime, timedelta\n",
    "import warnings\n",
    "import datetime\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "init_notebook_mode(connected=True)\n",
    "mpl.style.use('seaborn')\n",
    "pd.set_option('display.max_columns', 1000)\n",
    "from sklearn.metrics import accuracy_score\n",
    "from joblib import dump, load"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"X_bid_price_7_2018_26_4_2019_three_class.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(['Unnamed: 0'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1510, 850)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_first_quarter=df[(df['month_1']==1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_first_quarter.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "          -1       0.54      0.53      0.53       738\n",
      "           0       0.00      0.00      0.00        39\n",
      "           1       0.54      0.57      0.56       733\n",
      "\n",
      "   micro avg       0.54      0.54      0.54      1510\n",
      "   macro avg       0.36      0.37      0.36      1510\n",
      "weighted avg       0.53      0.54      0.53      1510\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.5370860927152318"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y=df['class_target1']\n",
    "X1=df.drop(['class_target1'],axis=1)\n",
    "clf = load('gb_3_class_bid_price_target1.joblib')\n",
    "features_three_class_bid_price=pd.read_csv(\"features_three_class_bid_price_target1.csv\")\n",
    "features_three_class_bid_price=features_three_class_bid_price['col_name']\n",
    "X1=X1[features_three_class_bid_price]\n",
    "y_pred=clf.predict(X1)\n",
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y,y_pred))\n",
    "accuracy_score(y,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "probabilities_3_class_bid_price = pd.DataFrame(clf.predict_proba(X1))\n",
    "probabilities_3_class_bid_price.columns=['-1_class','0_class','1_class']\n",
    "probabilities_3_class_bid_price.to_csv(\"probabilities_3_class_bid_price_target1.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[393   4 341]\n",
      " [ 26   0  13]\n",
      " [313   2 418]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "data": {
      "image/png": "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RCpRUnKaN0Sej7zovTjrH8EMOC8KZePBUwDENut+QcNuS1vR1rOFisKnVCUFUBERERGRSma1mJgU1+W8rnl++2aO5+YSYWoAQBiVM+eztBVtNc9TAkEBVERERETED3z36yyP47kniDA1qLS5np7Op1a0lWCiACoiIiIiUsnyovey8WAqULBtSnlU9p6evuFTnU4JFgqgIiIiIiIVUFqHM7tFDu6LsoELn79ZXiXN81TnU4KRAqiIiIiISDn5hs5jOXag5A6nIb8uvVt0qJLwCSXP81TnU4LROQOozWYLAWYB1wC5wMMpKSmpPu/HA38DXMArKSkp//ZTrSIiIiIiAbPk25XebVEizVYizSUvEvT0rO0A3NHn/BYhKo8yV7RVt1OqgfJ0QPsB5pSUlM42m60TMAX4K4DNZosAhgFXAmHAt4ACqIiIiIjUGJ6up6fjWVXDakuiFW2luitPAO0GfASQkpKyw2aztfd57zRwgILwGUZBF1REREREpMbYlbaH47kniK4XSZuGrao0fBbteKrTKdVdeQJofeCEz2unzWYzpqSkOH5/fQj4AQgFXq3k+kREREREAiYhNZFjOXYizVbe7DuB9PSsKv38oh1PdTqluitPAD0JWHxeh/iEz1uAxsAffn+93mazbUtJSfmytJtZrfUwGkMrVGxVio62nPskET/TcyjBQM+hBAs9i+JvS75dyY5D3xQ6ln7mGABdL78WKN9zGBpqKPe5Re1f+DaZ27/wvnbY7ZgaRtF+3pzzvpfUXNX578PyBNBtQF9g+e9zQH3XmrYD2UBuSkqK22azHQciyrqZ3X6morVWmehoS5X/v1siRek5lGCg51CChZ5F8beE1MRCCwx5eBYaurnJTQC8+d4ukpLTyryXPSsXq8VUoWc2beu2Yh3Peu2u1fMvXtXh78OyAnJ5Aui/gRttNtt2wAA8ZLPZRgCpKSkpH9hsthuAHTabzQV8DmyohJpFRERERPyipP07y7vAUFJymjdglsZqMdEhplG5atEcT6ltzhlAU1JSXMCQIoeTfd5/EXixkusSEREREfELz6JCEaYG3mOlbalSEqvFxKS4ytliRXM8pbYpTwdURERERKRGiTA1YHyXZwNaQ/r7y3BkZmKMilLHU2qNkEAXICIiIiJSVTyr2gYDz9BbdTylNlEAFREREZFawXehoXaNWge4mgLG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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1aa905e2390>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import keras\n",
    "y_pred_proba=clf.predict_proba(X1)\n",
    "y_test_cat = keras.utils.to_categorical(y, 3) \n",
    "from sklearn.metrics import roc_curve, auc,roc_auc_score\n",
    "fpr = dict()\n",
    "tpr = dict()\n",
    "roc_auc = dict()\n",
    "for i in range(3):\n",
    "    fpr[i], tpr[i], _ = roc_curve(y_test_cat[:, i],  y_pred_proba[:, i])\n",
    "    roc_auc[i] = auc(fpr[i], tpr[i]) \n",
    "fig=plt.figure(figsize=(16, 10))\n",
    "\n",
    "for i in range(3):\n",
    "\n",
    "    plt.plot(fpr[i], tpr[i], label='ROC curve of class {0} (area = {1:0.2f})'\n",
    "             ''.format(i, roc_auc[i]))\n",
    "    #plt.title('Receiver operating characteristic example')\n",
    "    plt.legend(loc=\"lower right\")\n",
    "    plt.legend(fontsize=12)\n",
    "plt.show() \n",
    " \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df.head()\n",
    "y_pred_3_class_close_7=pd.DataFrame(y_pred)\n",
    "y_pred_3_class_close_7.columns=['y_pred_3_class_bid_price']\n",
    "df_final_1=pd.concat([df,y_pred_3_class_close_7],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_final_1.to_csv(\"Model_prediction_file_3_class_bid_price_target1.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
